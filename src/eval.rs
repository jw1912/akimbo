use std::ops::{AddAssign, Sub};

use crate::{bitloop, consts::{File, Piece, Side}, position::Position};

pub fn eval(pos: &Position) -> i32 {
    let score = eval_side(pos, Side::WHITE) - eval_side(pos, Side::BLACK);

    [1, -1][pos.stm()] * score.taper(pos.phase)
}

fn eval_side(pos: &Position, side: usize) -> S {
    let mut score = S(0, 0);

    let side_bb = pos.side(side);
    let ksq = (pos.piece(Piece::KING) & side_bb).trailing_zeros();

    let flip = [56, 0][side] ^ if ksq % 8 > 3 { 7 } else { 0 };

    for piece in Piece::PAWN..=Piece::KING {
        let mut bb = pos.piece(piece) & side_bb;

        bitloop!(|bb, sq| {
            let fsq = usize::from(sq) ^ flip;
            score += PST[piece][fsq];

            if piece == Piece::ROOK {
                let pawns_bb = pos.piece(Piece::PAWN);
                let file_bb = File::A << (sq % 8);
                
                if file_bb & pawns_bb & side_bb == 0 {
                    score += ROOK_SEMI_OPEN_FILE[fsq % 8];
                }

                if file_bb & pawns_bb == 0 {
                    score += ROOK_FULL_OPEN_FILE[fsq % 8];
                }
            }
        });
    }

    score
}

#[derive(Clone, Copy, Default)]
pub struct S(i16, i16);

impl AddAssign<S> for S {
    fn add_assign(&mut self, rhs: S) {
        self.0 += rhs.0;
        self.1 += rhs.1;
    }
}

impl Sub<S> for S {
    type Output = S;

    fn sub(mut self, rhs: S) -> S {
        self.0 -= rhs.0;
        self.1 -= rhs.1;

        self
    }
}

impl S {
    fn taper(self, mut phase: i32) -> i32 {
        let mg = i32::from(self.0);
        let eg = i32::from(self.1);

        phase = phase.min(24);

        (mg * phase + (24 - phase) * eg) / 24
    }
}

static PST: [[S; 64]; 8] = [[S(0, 0); 64], [S(0, 0); 64],
    [
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
        S(258, 175), S(159, 198), S(268, 163), S(272, 147), S(263, 144), S(275, 154), S(251, 176), S(271, 172),
        S(148, 154), S(181, 146), S(177, 127), S(164, 127), S(160, 125), S(158, 126), S(134, 144), S( 98, 170),
        S(115, 113), S(134, 111), S(121,  95), S(122,  91), S(110,  95), S( 91, 102), S( 95, 118), S( 76, 126),
        S( 95, 102), S(127, 100), S(112,  89), S(101,  87), S( 94,  91), S( 80,  93), S( 85, 107), S( 63, 112),
        S(115,  95), S(153,  93), S(104,  94), S( 87, 101), S( 69, 104), S( 63,  97), S( 78, 109), S( 58, 109),
        S(105,  96), S(173,  90), S(126,  99), S( 76, 116), S( 52, 109), S( 61, 106), S( 70, 116), S( 57, 117),
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
    ], [
        S(195, 224), S(288, 281), S(201, 329), S(337, 298), S(271, 311), S(223, 329), S(233, 298), S(169, 259),
        S(310, 276), S(303, 315), S(413, 290), S(381, 306), S(371, 315), S(367, 302), S(311, 309), S(284, 289),
        S(344, 286), S(385, 307), S(452, 306), S(421, 316), S(405, 319), S(396, 315), S(358, 305), S(304, 299),
        S(354, 300), S(340, 321), S(398, 329), S(370, 336), S(401, 327), S(372, 331), S(339, 315), S(321, 305),
        S(320, 292), S(351, 305), S(350, 327), S(356, 332), S(347, 333), S(352, 327), S(337, 310), S(310, 293),
        S(295, 274), S(341, 290), S(335, 300), S(353, 313), S(345, 315), S(326, 303), S(316, 296), S(292, 274),
        S(297, 277), S(311, 281), S(330, 284), S(315, 295), S(318, 289), S(305, 287), S(279, 287), S(264, 259),
        S(245, 232), S(294, 251), S(313, 267), S(287, 279), S(278, 279), S(260, 270), S(284, 237), S(233, 237),
    ], [
        S(319, 312), S(317, 321), S(222, 331), S(266, 329), S(270, 332), S(265, 320), S(272, 323), S(292, 314),
        S(349, 300), S(351, 318), S(397, 313), S(370, 317), S(354, 325), S(376, 321), S(377, 313), S(336, 306),
        S(383, 310), S(411, 318), S(418, 322), S(425, 322), S(412, 318), S(388, 327), S(398, 314), S(358, 316),
        S(356, 315), S(376, 331), S(407, 327), S(408, 329), S(420, 328), S(398, 320), S(376, 330), S(353, 319),
        S(365, 307), S(373, 319), S(375, 325), S(399, 327), S(399, 327), S(375, 332), S(370, 326), S(353, 309),
        S(370, 303), S(376, 308), S(376, 319), S(382, 323), S(377, 322), S(366, 323), S(373, 315), S(356, 302),
        S(366, 293), S(391, 296), S(381, 306), S(363, 318), S(354, 315), S(370, 302), S(356, 297), S(364, 292),
        S(320, 296), S(363, 294), S(345, 303), S(329, 310), S(324, 307), S(343, 284), S(345, 291), S(321, 286),
    ], [
        S(508, 546), S(495, 567), S(478, 575), S(493, 555), S(485, 548), S(481, 558), S(462, 568), S(476, 556),
        S(469, 559), S(481, 574), S(503, 571), S(480, 564), S(488, 557), S(475, 567), S(453, 575), S(445, 571),
        S(424, 570), S(479, 572), S(488, 569), S(497, 552), S(468, 553), S(471, 565), S(454, 568), S(438, 568),
        S(427, 557), S(426, 576), S(460, 571), S(470, 550), S(459, 550), S(440, 565), S(416, 571), S(416, 564),
        S(403, 538), S(412, 555), S(420, 558), S(434, 541), S(425, 545), S(412, 557), S(405, 557), S(403, 548),
        S(415, 515), S(434, 526), S(427, 538), S(432, 527), S(415, 530), S(408, 539), S(400, 543), S(398, 528),
        S(371, 531), S(426, 527), S(444, 526), S(438, 520), S(424, 522), S(423, 532), S(406, 534), S(399, 524),
        S(414, 515), S(413, 540), S(447, 530), S(450, 524), S(435, 530), S(433, 537), S(426, 528), S(432, 525),
    ], [
        S(1015, 993), S(1004, 1003), S(1016, 1015), S(997, 1023), S(977, 1030), S(971, 1028), S(956, 1019), S(931, 1013),
        S(988, 981), S(921, 1054), S(989, 1041), S(942, 1075), S(933, 1071), S(931, 1061), S(910, 1051), S(918, 1012),
        S(979, 1001), S(1006, 1020), S(1020, 1029), S(996, 1041), S(951, 1056), S(959, 1030), S(935, 1021), S(949, 972),
        S(975, 989), S(951, 1035), S(958, 1060), S(965, 1051), S(958, 1047), S(944, 1033), S(935, 1021), S(938, 982),
        S(953, 980), S(962, 1000), S(950, 1016), S(950, 1023), S(944, 1033), S(949, 1003), S(935, 999), S(941, 961),
        S(958, 921), S(968, 949), S(967, 970), S(959, 974), S(950, 977), S(949, 981), S(954, 953), S(935, 953),
        S(939, 893), S(978, 896), S(977, 907), S(964, 939), S(961, 942), S(963, 937), S(953, 947), S(934, 948),
        S(902, 887), S(904, 902), S(935, 900), S(945, 927), S(961, 914), S(935, 950), S(931, 939), S(942, 935),
    ], [
        S( 86, -42), S( 69,   2), S( 61,  -5), S( 70, -15), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 48,   7), S( 57,  31), S( 84,  22), S( 53,  15), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( -2,  31), S( 48,  41), S( 49,  34), S( 62,  24), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-33,  20), S(-31,  43), S( -1,  38), S( -5,  38), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-73,   8), S(-69,  27), S(-64,  35), S(-75,  42), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-64,   3), S(-42,  10), S(-70,  23), S(-75,  29), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(  5, -18), S( 10, -11), S(-46,   7), S(-59,   9), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 14, -56), S( 28, -38), S(-25, -25), S( -3, -38), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    ],
];

const ROOK_SEMI_OPEN_FILE: [S; 8] = [S( 45,  20), S( 57,  -7), S( 21, -10), S( 16,   3), S( 24,   4), S( 15,   0), S( 22,  -2), S( 23,   9)];

const ROOK_FULL_OPEN_FILE: [S; 8] = [S( 72, -39), S( 43, -15), S( 43,  -4), S( 25,   5), S( 21,   9), S( 24,   9), S( 24,   5), S( 23,  -2)];
