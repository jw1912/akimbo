use std::ops::{AddAssign, Sub};

use crate::{attacks::Attacks, bitloop, consts::{File, Piece, Side, MOBILITY_OFFSET, RAILS, SPANS}, position::Position};

pub fn eval(pos: &Position) -> i32 {
    let score = eval_side(pos, Side::WHITE) - eval_side(pos, Side::BLACK);

    [1, -1][pos.stm()] * score.taper(pos.phase)
}

fn eval_side(pos: &Position, side: usize) -> S {
    let mut score = S(0, 0);

    let side_bb = pos.side(side);
    let ksq = (pos.piece(Piece::KING) & side_bb).trailing_zeros();

    let flip = [56, 0][side] ^ if ksq % 8 > 3 { 7 } else { 0 };

    let pawns_bb = pos.piece(Piece::PAWN);

    let our_pawns = side_bb & pawns_bb;

    let pawn_defends = if side == Side::WHITE {
        Attacks::white_pawn_setwise(our_pawns)
    } else {
        Attacks::black_pawn_setwise(our_pawns)
    } & side_bb;

    for piece in Piece::PAWN..=Piece::KING {
        let defended = (pawn_defends & pos.piece(piece)).count_ones();
        score += PAWN_DEFENDS[8 * (piece - 2) + defended as usize];
    }

    let opp_pawns = pos.side(side ^ 1) & pawns_bb;

    let pawn_threats = if side == Side::WHITE {
        Attacks::black_pawn_setwise(opp_pawns)
    } else {
        Attacks::white_pawn_setwise(opp_pawns)
    };

    let safe = !pawn_threats;

    let occ = pos.side(side) ^ pos.side(side ^ 1);

    if (side_bb & pos.piece(Piece::BISHOP)).count_ones() > 1 {
        score += BISHOP_PAIR;
    }

    for (piece, pst) in PST.iter().enumerate().take(Piece::KING + 1).skip(Piece::PAWN) {
        let mut bb = pos.piece(piece) & side_bb;

        let mobility_offset = MOBILITY_OFFSET[piece];

        bitloop!(|bb, sq| {
            let sq = usize::from(sq);
            let fsq = sq ^ flip;

            score += pst[fsq];

            if mobility_offset != usize::MAX {
                let attacks = Attacks::for_piece(piece, side, sq, occ);
                let mobility = (attacks & safe).count_ones() as usize;
                score += MOBILITY[mobility_offset + mobility];
            }

            match piece {
                Piece::PAWN => {
                    if RAILS[sq % 8] & pawns_bb & side_bb == 0 {
                        score += ISOLATED_PAWN_FILE[fsq % 8];
                    }

                    if SPANS[side][sq] & pawns_bb & pos.side(side ^ 1) == 0 {
                        score += PASSED_PAWN_PST[fsq];
                    }
                }
                Piece::ROOK => {
                    let file_bb = File::A << (sq % 8);
                    
                    if file_bb & pawns_bb & side_bb == 0 {
                        score += ROOK_SEMI_OPEN_FILE[fsq % 8];
                    }
    
                    if file_bb & pawns_bb == 0 {
                        score += ROOK_FULL_OPEN_FILE[fsq % 8];
                    }
                }
                _ => {}
            }
        });
    }

    score
}

#[derive(Clone, Copy, Default)]
pub struct S(i16, i16);

impl AddAssign<S> for S {
    fn add_assign(&mut self, rhs: S) {
        self.0 += rhs.0;
        self.1 += rhs.1;
    }
}

impl Sub<S> for S {
    type Output = S;

    fn sub(mut self, rhs: S) -> S {
        self.0 -= rhs.0;
        self.1 -= rhs.1;

        self
    }
}

impl S {
    fn taper(self, mut phase: i32) -> i32 {
        let mg = i32::from(self.0);
        let eg = i32::from(self.1);

        phase = phase.min(24);

        (mg * phase + (24 - phase) * eg) / 24
    }
}

static PST: [[S; 64]; 8] = [[S(0, 0); 64], [S(0, 0); 64],
[
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
        S(211, 143), S(110, 165), S(191, 141), S(193, 132), S(180, 132), S(192, 136), S(169, 149), S(195, 151),
        S(172,  85), S(159,  87), S(167,  84), S(117, 109), S( 91, 106), S(101,  98), S( 88,  99), S( 69, 123),
        S(133,  80), S( 98,  88), S(116,  79), S(100,  86), S( 84,  91), S( 72,  94), S( 68,  92), S( 61, 107),
        S(104,  76), S( 89,  82), S(108,  78), S( 89,  82), S( 79,  87), S( 72,  86), S( 58,  83), S( 52,  96),
        S(116,  72), S(114,  72), S(100,  84), S( 79,  94), S( 62,  99), S( 54,  91), S( 53,  79), S( 42,  95),
        S(125,  70), S(149,  66), S(144,  81), S( 82, 107), S( 67,  97), S( 66,  93), S( 59,  82), S( 55, 100),
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
    ], [
        S(226, 276), S(303, 302), S(204, 340), S(331, 311), S(258, 325), S(205, 341), S(234, 321), S(204, 310),
        S(329, 302), S(298, 326), S(393, 288), S(373, 304), S(354, 315), S(352, 300), S(298, 323), S(293, 316),
        S(349, 300), S(365, 300), S(420, 298), S(379, 311), S(361, 313), S(354, 309), S(331, 302), S(297, 311),
        S(359, 311), S(326, 314), S(362, 320), S(349, 323), S(376, 316), S(338, 321), S(319, 308), S(320, 316),
        S(329, 311), S(337, 299), S(328, 314), S(334, 321), S(328, 321), S(321, 316), S(318, 305), S(313, 308),
        S(289, 294), S(316, 290), S(301, 291), S(319, 304), S(312, 310), S(293, 295), S(295, 294), S(288, 290),
        S(307, 315), S(314, 297), S(316, 282), S(307, 293), S(313, 289), S(297, 285), S(279, 305), S(283, 287),
        S(275, 285), S(306, 284), S(307, 286), S(297, 292), S(289, 291), S(268, 283), S(300, 275), S(268, 276),
    ], [
        S(298, 318), S(293, 324), S(186, 334), S(230, 329), S(229, 331), S(225, 326), S(228, 331), S(257, 328),
        S(321, 312), S(298, 315), S(344, 311), S(317, 314), S(306, 322), S(320, 319), S(322, 312), S(301, 319),
        S(347, 315), S(363, 313), S(368, 311), S(366, 314), S(348, 310), S(330, 319), S(343, 311), S(322, 317),
        S(326, 319), S(337, 317), S(356, 315), S(354, 315), S(373, 314), S(342, 309), S(334, 318), S(314, 319),
        S(347, 308), S(331, 312), S(324, 314), S(358, 312), S(354, 314), S(332, 320), S(324, 317), S(327, 308),
        S(344, 315), S(336, 306), S(337, 312), S(341, 315), S(339, 314), S(326, 313), S(337, 311), S(332, 308),
        S(346, 313), S(366, 296), S(349, 305), S(335, 313), S(325, 309), S(340, 301), S(330, 296), S(355, 304),
        S(324, 314), S(345, 304), S(329, 309), S(318, 311), S(312, 307), S(334, 293), S(336, 298), S(322, 299),
    ], [
        S(550, 529), S(531, 549), S(513, 558), S(522, 540), S(517, 533), S(513, 542), S(505, 549), S(515, 538),
        S(518, 543), S(517, 557), S(536, 555), S(519, 548), S(526, 541), S(514, 550), S(494, 558), S(491, 554),
        S(482, 552), S(535, 548), S(546, 546), S(548, 534), S(520, 535), S(519, 546), S(508, 547), S(492, 550),
        S(481, 541), S(488, 553), S(505, 552), S(518, 534), S(510, 532), S(488, 548), S(473, 552), S(469, 547),
        S(450, 526), S(468, 535), S(464, 540), S(485, 525), S(475, 528), S(463, 539), S(457, 539), S(456, 534),
        S(460, 508), S(475, 509), S(475, 518), S(479, 508), S(472, 513), S(457, 525), S(451, 527), S(449, 518),
        S(418, 519), S(477, 506), S(494, 504), S(494, 499), S(483, 502), S(478, 512), S(462, 513), S(455, 509),
        S(466, 497), S(462, 515), S(501, 506), S(507, 497), S(495, 503), S(489, 510), S(481, 504), S(481, 506),
    ], [
        S(1024, 972), S(1001, 983), S(1000, 1001), S(973, 1008), S(951, 1014), S(942, 1015), S(941, 1001), S(933, 988),
        S(999, 971), S(901, 1040), S(958, 1030), S(910, 1068), S(907, 1054), S(903, 1042), S(883, 1035), S(912, 1000),
        S(974, 1006), S(1000, 1003), S(1007, 1011), S(972, 1023), S(922, 1038), S(937, 1005), S(924, 997), S(942, 958),
        S(966, 993), S(944, 1023), S(940, 1039), S(945, 1025), S(939, 1017), S(922, 1007), S(927, 990), S(930, 967),
        S(947, 978), S(948, 986), S(937, 989), S(934, 997), S(930, 999), S(937, 974), S(923, 970), S(935, 947),
        S(954, 916), S(957, 927), S(956, 944), S(950, 942), S(939, 952), S(937, 954), S(943, 930), S(932, 936),
        S(944, 880), S(968, 878), S(966, 886), S(956, 916), S(953, 917), S(952, 917), S(943, 924), S(940, 923),
        S(918, 876), S(907, 887), S(940, 877), S(956, 888), S(963, 892), S(944, 911), S(943, 906), S(941, 914),
    ], [
        S( 82, -48), S( 76,   0), S( 66,  -7), S( 81, -17), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 54,   0), S( 66,  29), S( 96,  19), S( 72,  13), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 12,  21), S( 69,  35), S( 74,  30), S( 85,  21), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-20,  12), S(  4,  32), S( 26,  32), S( 19,  35), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-71,   9), S(-55,  24), S(-47,  32), S(-65,  43), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-73,   9), S(-28,   9), S(-65,  25), S(-69,  31), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(  2, -15), S(  4,  -6), S(-49,  11), S(-67,  15), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(  3, -54), S( 20, -35), S(-31, -20), S(-10, -32), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    ],
];

const ROOK_SEMI_OPEN_FILE: [S; 8] = [S( 47,  22), S( 65,  -4), S( 30, -11), S( 17,   2), S( 24,   3), S( 16,  -1), S( 19,   2), S( 15,  15)];

const ROOK_FULL_OPEN_FILE: [S; 8] = [S( 61, -50), S( 38, -24), S( 31,  -8), S( 20,   0), S( 14,   3), S( 18,   5), S( 20,  -5), S( 22, -15)];

const ISOLATED_PAWN_FILE: [S; 8] = [S(-40,  -3), S( -6, -15), S(-19, -13), S(-26, -15), S(-24, -16), S(-20, -17), S(-13, -12), S( -8, -23)];

static PASSED_PAWN_PST: [S; 64] = [
    S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    S(111,  43), S( 10,  65), S( 91,  41), S( 93,  32), S( 80,  32), S( 92,  36), S( 69,  49), S( 95,  51),
    S( 23,  99), S( 23,  94), S( 49,  74), S( 46,  35), S( 68,  36), S( 73,  54), S(100,  62), S(110,  81),
    S( 15,  64), S( 37,  69), S( 14,  54), S( 10,  35), S( 30,  25), S( 39,  32), S( 52,  42), S( 52,  59),
    S( -6,  54), S(  6,  58), S( -6,  38), S( -5,  26), S(  0,  22), S( -3,  24), S( 25,  36), S( 31,  44),
    S(  4,  19), S(-12,  34), S( -1,  14), S(  4,  13), S(-11,   8), S( -7,  14), S( -2,  27), S( 14,  25),
    S(  5,  10), S(  7,  21), S( -4,  11), S( 20,  -3), S( -5,   2), S( -8,  19), S( -2,  28), S(  5,  21),
    S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
];

static MOBILITY: [S; 66] = [
    S(-79, -58), S(-28, -55), S( -3, -21), S( 16,   7), S( 31,  18), S( 35,  32),
    S( 49,  34), S( 60,  37), S( 76,  32), S(-62, -108), S(-32, -53), S(  1, -27),
    S( 10,   3), S( 24,  11), S( 36,  18), S( 45,  24), S( 51,  31), S( 56,  34),
    S( 62,  37), S( 67,  40), S( 81,  36), S( 96,  34), S(115,  35), S(-45, -33),
    S(-25, -12), S(-36,  13), S(-34,  39), S(-27,  47), S(-21,  54), S(-17,  61),
    S(-12,  67), S( -8,  68), S( -1,  72), S(  2,  76), S(  7,  77), S( 13,  78),
    S( 22,  74), S( 20,  78), S(  0,   0), S(  0,   0), S(-12,  -6), S( 11, -22),
    S(  7,   3), S( 37,  12), S( 38,  55), S( 38,  88), S( 44, 101), S( 48, 117),
    S( 54, 126), S( 62, 127), S( 69, 127), S( 73, 136), S( 78, 137), S( 77, 146),
    S( 79, 151), S( 80, 157), S( 86, 155), S( 92, 155), S( 95, 159), S(103, 157),
    S(119, 149), S(133, 141), S(140, 133), S(126, 142), S( 91, 116), S( 69,  89),
];

const BISHOP_PAIR: S = S( 36,  59);

static PAWN_DEFENDS: [S; 48] = [
    S(-46,  -9), S(-27, -17), S(-10, -12), S(  7,  -2), S( 23,  11), S( 46,  18), S( 82,  50), S(  0,   0),
    S( -5,  -6), S(  3,   5), S(  9,   7), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    S( -3,  -4), S(  3,   2), S( -1,  18), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    S( -7,  -5), S(  3,   5), S( 22,   4), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    S(  2, -13), S( -6,  11), S( 13,   7), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    S( 35, -12), S(-35,  12), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
];
