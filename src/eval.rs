use std::ops::{AddAssign, SubAssign};

use crate::{bitloop, consts::{Piece, Side}, init, position::Position};

pub fn eval(pos: &Position) -> i32 {
    let mut score = S(0, 0);

    for side in [Side::WHITE, Side::BLACK] {
        let side_bb = pos.side(side);
        let ksq = (pos.piece(Piece::KING) & side_bb).trailing_zeros();

        let flip = if ksq % 8 > 3 { 7 } else { 0 };

        for piece in Piece::PAWN..=Piece::KING {
            let mut bb = pos.piece(piece) & side_bb;
            bitloop!(|bb, sq| score += PST[side][piece][usize::from(sq) ^ flip]);
        }
    }

    [1, -1][pos.stm()] * score.taper(pos.phase)
}

#[derive(Clone, Copy, Default)]
pub struct S(i16, i16);

impl AddAssign<S> for S {
    fn add_assign(&mut self, rhs: S) {
        self.0 += rhs.0;
        self.1 += rhs.1;
    }
}

impl SubAssign<S> for S {
    fn sub_assign(&mut self, rhs: S) {
        self.0 -= rhs.0;
        self.1 -= rhs.1;
    }
}

impl S {
    fn taper(self, mut phase: i32) -> i32 {
        let mg = i32::from(self.0);
        let eg = i32::from(self.1);

        phase = phase.min(24);

        (mg * phase + (24 - phase) * eg) / 24
    }
}

static PST: [[[S; 64]; 8]; 2] = [
    init!(|i, 8| init!(|j, 64| RAW_PST[i][j ^ 56])),
    init!(|i, 8| init!(|j, 64| S(-RAW_PST[i][j].0, -RAW_PST[i][j].1))),
];
const RAW_PST: [[S; 64]; 8] = [[S(0, 0); 64], [S(0, 0); 64],
    [
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
        S(249, 171), S(157, 198), S(266, 163), S(265, 147), S(252, 144), S(271, 154), S(248, 176), S(260, 167),
        S(136, 153), S(176, 146), S(170, 128), S(154, 128), S(149, 125), S(152, 127), S(127, 145), S( 83, 169),
        S(105, 113), S(127, 112), S(112,  97), S(115,  93), S(106,  95), S( 87, 102), S( 89, 119), S( 62, 125),
        S( 85, 102), S(120, 101), S(104,  92), S( 95,  88), S( 91,  91), S( 79,  93), S( 79, 108), S( 50, 112),
        S(105,  94), S(146,  94), S( 97,  96), S( 83, 102), S( 67, 105), S( 62,  97), S( 73, 109), S( 45, 109),
        S( 95,  96), S(165,  91), S(117, 101), S( 71, 117), S( 49, 110), S( 60, 106), S( 66, 116), S( 44, 117),
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
    ], [
        S(193, 224), S(287, 282), S(203, 329), S(335, 299), S(275, 311), S(224, 329), S(235, 298), S(167, 259),
        S(306, 277), S(300, 317), S(414, 290), S(380, 306), S(368, 316), S(367, 303), S(308, 311), S(283, 290),
        S(340, 288), S(384, 307), S(448, 307), S(418, 317), S(401, 321), S(393, 316), S(357, 306), S(304, 299),
        S(348, 302), S(334, 322), S(391, 331), S(364, 337), S(394, 329), S(367, 332), S(334, 317), S(318, 306),
        S(315, 292), S(344, 306), S(344, 328), S(349, 333), S(340, 334), S(345, 329), S(334, 311), S(307, 295),
        S(289, 275), S(335, 291), S(329, 301), S(346, 314), S(340, 316), S(321, 304), S(311, 296), S(287, 274),
        S(291, 277), S(304, 282), S(324, 284), S(309, 296), S(313, 290), S(299, 288), S(274, 288), S(261, 259),
        S(240, 231), S(288, 250), S(307, 267), S(281, 280), S(273, 280), S(255, 270), S(279, 237), S(229, 234),
    ], [
        S(314, 312), S(314, 322), S(220, 332), S(267, 329), S(270, 332), S(268, 320), S(269, 323), S(289, 314),
        S(345, 301), S(345, 320), S(394, 314), S(368, 318), S(352, 326), S(375, 322), S(372, 314), S(333, 307),
        S(380, 311), S(408, 319), S(414, 323), S(423, 323), S(410, 318), S(385, 328), S(397, 315), S(356, 317),
        S(351, 316), S(369, 332), S(402, 328), S(402, 330), S(415, 329), S(394, 321), S(371, 331), S(349, 320),
        S(360, 309), S(368, 321), S(369, 326), S(393, 327), S(392, 329), S(369, 333), S(365, 326), S(349, 310),
        S(365, 304), S(370, 309), S(370, 320), S(375, 324), S(371, 322), S(358, 325), S(368, 315), S(351, 302),
        S(361, 295), S(385, 297), S(376, 307), S(357, 319), S(348, 316), S(364, 304), S(349, 299), S(359, 293),
        S(315, 296), S(357, 295), S(339, 303), S(323, 311), S(318, 308), S(336, 284), S(341, 291), S(314, 287),
    ], [
        S(553, 544), S(533, 560), S(512, 567), S(525, 560), S(519, 560), S(511, 564), S(494, 568), S(509, 558),
        S(520, 557), S(529, 565), S(542, 562), S(511, 571), S(524, 568), S(506, 574), S(487, 576), S(476, 575),
        S(471, 570), S(528, 563), S(514, 564), S(526, 560), S(503, 565), S(497, 572), S(481, 570), S(466, 574),
        S(462, 561), S(467, 570), S(478, 568), S(488, 561), S(486, 563), S(456, 575), S(437, 575), S(434, 572),
        S(426, 545), S(447, 551), S(434, 556), S(448, 553), S(448, 559), S(428, 567), S(421, 562), S(415, 557),
        S(432, 528), S(469, 523), S(438, 536), S(441, 540), S(435, 544), S(422, 548), S(417, 547), S(407, 539),
        S(395, 541), S(470, 521), S(454, 524), S(447, 532), S(443, 535), S(437, 540), S(423, 537), S(405, 535),
        S(417, 525), S(446, 538), S(447, 533), S(456, 537), S(453, 544), S(446, 544), S(438, 532), S(433, 531),
    ], [
        S(1013, 988), S(1001, 998), S(1013, 1011), S(993, 1019), S(974, 1025), S(969, 1023), S(953, 1015), S(928, 1009),
        S(985, 978), S(917, 1051), S(990, 1035), S(940, 1071), S(931, 1066), S(929, 1057), S(907, 1049), S(920, 1007),
        S(973, 1000), S(1004, 1017), S(1014, 1026), S(992, 1036), S(949, 1051), S(956, 1026), S(934, 1017), S(948, 969),
        S(969, 988), S(945, 1033), S(951, 1057), S(960, 1047), S(955, 1042), S(939, 1030), S(931, 1020), S(934, 981),
        S(948, 978), S(955, 999), S(944, 1013), S(944, 1020), S(939, 1030), S(944, 1000), S(930, 997), S(936, 961),
        S(952, 920), S(963, 946), S(961, 966), S(953, 971), S(946, 974), S(944, 978), S(949, 950), S(931, 950),
        S(935, 888), S(972, 892), S(973, 902), S(958, 936), S(956, 939), S(958, 935), S(948, 942), S(931, 942),
        S(895, 884), S(897, 899), S(927, 896), S(938, 922), S(955, 907), S(929, 944), S(925, 933), S(936, 931),
    ], [
        S( 85, -41), S( 68,   2), S( 59,  -5), S( 68, -15), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 47,   7), S( 56,  32), S( 82,  22), S( 50,  16), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( -4,  32), S( 47,  41), S( 48,  35), S( 62,  24), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-36,  21), S(-30,  43), S( -1,  38), S( -3,  38), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-72,   8), S(-68,  27), S(-64,  35), S(-73,  42), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-64,   3), S(-42,  10), S(-71,  23), S(-74,  29), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(  4, -18), S( 10, -12), S(-47,   7), S(-59,   9), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 14, -56), S( 28, -37), S(-24, -26), S( -5, -38), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    ],  
];