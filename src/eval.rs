use std::ops::{AddAssign, Sub};

use crate::{attacks::Attacks, bitloop, consts::{File, Piece, Side, RAILS, SPANS}, position::Position};

pub fn eval(pos: &Position) -> i32 {
    let score = eval_side(pos, Side::WHITE) - eval_side(pos, Side::BLACK);

    [1, -1][pos.stm()] * score.taper(pos.phase)
}

fn eval_side(pos: &Position, side: usize) -> S {
    let mut score = S(0, 0);

    let side_bb = pos.side(side);
    let ksq = (pos.piece(Piece::KING) & side_bb).trailing_zeros();

    let flip = [56, 0][side] ^ if ksq % 8 > 3 { 7 } else { 0 };

    let pawns_bb = pos.piece(Piece::PAWN);

    let opp_pawns = pos.side(side ^ 1) & pawns_bb;

    let pawn_threats = if side == Side::WHITE {
        Attacks::black_pawn_setwise(opp_pawns)
    } else {
        Attacks::white_pawn_setwise(opp_pawns)
    };

    let safe = !pawn_threats;

    let occ = pos.side(side) ^ pos.side(side ^ 1);

    for (piece, pst) in PST.iter().enumerate().take(Piece::KING + 1).skip(Piece::PAWN) {
        let mut bb = pos.piece(piece) & side_bb;

        bitloop!(|bb, sq| {
            let sq = usize::from(sq);
            let fsq = sq ^ flip;
            score += pst[fsq];

            match piece {
                Piece::PAWN => {
                    if RAILS[sq % 8] & pawns_bb & side_bb == 0 {
                        score += ISOLATED_PAWN_FILE[fsq % 8];
                    }

                    if SPANS[side][sq] & pawns_bb & pos.side(side ^ 1) == 0 {
                        score += PASSED_PAWN_PST[fsq];
                    }
                }
                Piece::KNIGHT => score += KNIGHT_MOBILITY[(Attacks::knight(sq) & safe).count_ones() as usize],
                Piece::BISHOP => score += BISHOP_MOBILITY[(Attacks::bishop(sq, occ) & safe).count_ones() as usize],
                Piece::ROOK => {
                    let file_bb = File::A << (sq % 8);
                    
                    if file_bb & pawns_bb & side_bb == 0 {
                        score += ROOK_SEMI_OPEN_FILE[fsq % 8];
                    }
    
                    if file_bb & pawns_bb == 0 {
                        score += ROOK_FULL_OPEN_FILE[fsq % 8];
                    }

                    score += ROOK_MOBILITY[(Attacks::rook(sq, occ) & safe).count_ones() as usize];
                }
                Piece::QUEEN => score += QUEEN_MOBILITY[(Attacks::queen(sq, occ) & safe).count_ones() as usize],
                _ => {}
            }
        });
    }

    score
}

#[derive(Clone, Copy, Default)]
pub struct S(i16, i16);

impl AddAssign<S> for S {
    fn add_assign(&mut self, rhs: S) {
        self.0 += rhs.0;
        self.1 += rhs.1;
    }
}

impl Sub<S> for S {
    type Output = S;

    fn sub(mut self, rhs: S) -> S {
        self.0 -= rhs.0;
        self.1 -= rhs.1;

        self
    }
}

impl S {
    fn taper(self, mut phase: i32) -> i32 {
        let mg = i32::from(self.0);
        let eg = i32::from(self.1);

        phase = phase.min(24);

        (mg * phase + (24 - phase) * eg) / 24
    }
}

static PST: [[S; 64]; 8] = [[S(0, 0); 64], [S(0, 0); 64],
[
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
        S(210, 143), S(110, 164), S(191, 141), S(193, 132), S(180, 132), S(191, 136), S(168, 148), S(194, 152),
        S(170,  85), S(156,  86), S(166,  84), S(116, 110), S( 91, 106), S( 99,  99), S( 86,  99), S( 69, 123),
        S(135,  81), S( 97,  88), S(118,  80), S(102,  87), S( 90,  91), S( 76,  95), S( 70,  92), S( 64, 108),
        S(112,  77), S( 91,  83), S(116,  80), S( 94,  84), S( 88,  88), S( 78,  88), S( 63,  82), S( 57,  98),
        S(126,  73), S(127,  72), S(112,  85), S( 93,  93), S( 75,  97), S( 63,  91), S( 66,  78), S( 53,  95),
        S(123,  71), S(149,  68), S(143,  84), S( 87, 108), S( 71,  98), S( 68,  95), S( 62,  82), S( 57, 102),
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
    ], [
        S(223, 269), S(303, 298), S(204, 339), S(326, 310), S(252, 325), S(204, 340), S(232, 317), S(202, 305),
        S(327, 300), S(296, 326), S(388, 289), S(370, 304), S(352, 315), S(348, 299), S(296, 322), S(290, 314),
        S(346, 299), S(362, 302), S(419, 301), S(376, 315), S(361, 316), S(352, 312), S(330, 303), S(296, 310),
        S(355, 311), S(322, 318), S(362, 325), S(346, 328), S(374, 321), S(337, 326), S(319, 311), S(318, 315),
        S(330, 312), S(339, 302), S(330, 318), S(332, 325), S(327, 325), S(321, 320), S(320, 307), S(312, 308),
        S(292, 295), S(321, 292), S(302, 295), S(321, 307), S(312, 310), S(294, 298), S(296, 295), S(290, 289),
        S(305, 312), S(311, 295), S(315, 280), S(305, 291), S(311, 286), S(294, 284), S(276, 303), S(283, 283),
        S(275, 280), S(304, 281), S(306, 283), S(294, 289), S(287, 288), S(265, 280), S(298, 270), S(263, 276),
    ], [
        S(304, 319), S(299, 325), S(196, 335), S(240, 330), S(241, 333), S(234, 327), S(237, 333), S(266, 328),
        S(330, 313), S(306, 318), S(351, 313), S(325, 316), S(316, 324), S(330, 321), S(330, 314), S(310, 320),
        S(357, 318), S(370, 317), S(375, 314), S(376, 318), S(360, 313), S(340, 322), S(354, 314), S(331, 320),
        S(334, 320), S(347, 322), S(363, 318), S(364, 319), S(382, 318), S(353, 312), S(346, 322), S(324, 321),
        S(361, 310), S(341, 315), S(337, 317), S(368, 315), S(365, 317), S(343, 323), S(335, 320), S(338, 311),
        S(355, 317), S(351, 308), S(349, 313), S(355, 317), S(349, 315), S(338, 315), S(348, 314), S(345, 309),
        S(360, 312), S(374, 297), S(362, 304), S(344, 314), S(336, 311), S(350, 303), S(339, 297), S(368, 304),
        S(336, 315), S(354, 304), S(340, 310), S(329, 312), S(322, 309), S(347, 296), S(348, 299), S(334, 301),
    ], [
        S(544, 529), S(524, 550), S(506, 558), S(518, 539), S(513, 531), S(508, 541), S(500, 548), S(514, 536),
        S(513, 542), S(512, 557), S(534, 554), S(515, 547), S(523, 539), S(510, 549), S(489, 557), S(487, 553),
        S(479, 552), S(531, 549), S(543, 547), S(546, 533), S(519, 534), S(518, 545), S(507, 547), S(489, 549),
        S(478, 541), S(484, 556), S(506, 553), S(521, 534), S(512, 531), S(489, 547), S(471, 553), S(467, 546),
        S(451, 526), S(465, 537), S(467, 541), S(483, 525), S(474, 528), S(463, 539), S(457, 539), S(453, 533),
        S(460, 506), S(479, 508), S(478, 516), S(482, 507), S(469, 510), S(456, 522), S(450, 525), S(448, 516),
        S(414, 517), S(470, 506), S(491, 503), S(489, 497), S(478, 499), S(473, 510), S(455, 512), S(450, 508),
        S(463, 495), S(457, 514), S(497, 504), S(502, 495), S(489, 500), S(484, 508), S(476, 503), S(476, 505),
    ], [
        S(1021, 965), S(996, 978), S(994, 995), S(969, 1003), S(945, 1009), S(937, 1010), S(938, 995), S(928, 983),
        S(992, 969), S(893, 1038), S(953, 1027), S(904, 1064), S(901, 1050), S(898, 1037), S(879, 1031), S(908, 994),
        S(970, 1001), S(992, 1003), S(998, 1011), S(964, 1021), S(917, 1036), S(929, 1006), S(917, 997), S(937, 953),
        S(961, 989), S(937, 1022), S(933, 1037), S(937, 1026), S(931, 1019), S(914, 1007), S(921, 990), S(926, 962),
        S(941, 978), S(941, 987), S(928, 993), S(926, 997), S(922, 1000), S(929, 976), S(917, 969), S(931, 942),
        S(947, 918), S(949, 934), S(949, 944), S(941, 945), S(931, 951), S(930, 951), S(937, 928), S(925, 934),
        S(939, 877), S(963, 873), S(962, 879), S(951, 909), S(948, 909), S(947, 909), S(938, 916), S(935, 918),
        S(916, 870), S(903, 883), S(935, 870), S(952, 879), S(960, 883), S(939, 902), S(938, 899), S(937, 908),
    ], [
        S( 84, -49), S( 76,   0), S( 69,  -7), S( 82, -17), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 55,  -1), S( 66,  29), S( 96,  20), S( 72,  13), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 12,  22), S( 60,  37), S( 68,  32), S( 80,  23), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-23,  13), S(-15,  38), S( 16,  35), S(  7,  38), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-75,   9), S(-67,  27), S(-59,  35), S(-70,  43), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-73,   8), S(-46,  13), S(-71,  25), S(-74,  31), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( -0, -16), S(  4,  -7), S(-48,   9), S(-64,  13), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(  6, -56), S( 23, -37), S(-27, -22), S( -5, -34), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    ],
];

const ROOK_SEMI_OPEN_FILE: [S; 8] = [S( 45,  23), S( 64,  -5), S( 25,  -8), S( 16,   3), S( 24,   4), S( 15,  -0), S( 18,   1), S( 15,  15)];

const ROOK_FULL_OPEN_FILE: [S; 8] = [S( 62, -50), S( 39, -23), S( 34, -10), S( 20,   0), S( 12,   4), S( 19,   5), S( 21,  -4), S( 21, -15)];

const ISOLATED_PAWN_FILE: [S; 8] = [S(-46,  -3), S(-12, -13), S(-22, -13), S(-32, -15), S(-33, -16), S(-24, -17), S(-18, -10), S(-14, -24)];

static PASSED_PAWN_PST: [S; 64] = [
    S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    S(110,  43), S( 10,  64), S( 91,  41), S( 93,  32), S( 80,  32), S( 91,  36), S( 68,  48), S( 94,  52),
    S( 27,  99), S( 28,  93), S( 50,  75), S( 46,  36), S( 69,  36), S( 74,  55), S(103,  61), S(111,  83),
    S( 15,  64), S( 41,  68), S( 13,  54), S( 12,  36), S( 31,  25), S( 37,  32), S( 53,  41), S( 53,  59),
    S( -8,  53), S(  8,  55), S( -9,  36), S( -5,  26), S( -0,  22), S( -4,  23), S( 25,  35), S( 29,  44),
    S(  4,  18), S(-12,  30), S( -6,  13), S( -0,  14), S(-15,  10), S(-10,  14), S( -6,  25), S( 11,  24),
    S(  8,  10), S(  8,  19), S( -4,  10), S( 17,  -1), S( -4,   4), S( -9,  18), S( -2,  27), S(  6,  21),
    S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
];

static KNIGHT_MOBILITY: [S; 9] = [
    S(-75, -55), S(-30, -53), S( -4, -18),
    S( 15,   9), S( 30,  18), S( 33,  32),
    S( 48,  33), S( 60,  35), S( 74,  28),
];

static BISHOP_MOBILITY: [S; 14] = [
    S(-56, -103), S(-24, -47), S( 11, -23), S( 21,   6), S( 37,  13), S( 50,  20), S( 58,  26),
    S( 64,  32), S( 69,  36), S( 73,  38), S( 77,  42), S( 88,  37), S(104,  32), S(121,  35),
];

static ROOK_MOBILITY: [S; 15] = [
    S(-51, -39), S(-34, -15), S(-40,   9), S(-38,  38), S(-30,  45),
    S(-25,  51), S(-20,  59), S(-16,  64), S(-11,  66), S( -5,  69),
    S( -1,  73), S(  4,  74), S( 10,  75), S( 19,  70), S( 15,  75),
];

static QUEEN_MOBILITY: [S; 28] = [
    S(  0,   0), S(  0,   0), S(-11,  -6), S(  8, -24), S( -1,  -1), S( 29,  14), S( 31,  50),
    S( 32,  83), S( 37,  97), S( 42, 114), S( 47, 124), S( 54, 126), S( 62, 126), S( 65, 135),
    S( 70, 136), S( 70, 145), S( 72, 150), S( 72, 155), S( 79, 153), S( 85, 153), S( 88, 157),
    S( 95, 154), S(113, 145), S(127, 135), S(137, 127), S(121, 135), S( 87, 109), S( 66,  84),
];
