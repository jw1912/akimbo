use std::ops::{AddAssign, Sub};

use crate::{bitloop, consts::{File, Piece, Side, RAILS, SPANS}, position::Position};

pub fn eval(pos: &Position) -> i32 {
    let score = eval_side(pos, Side::WHITE) - eval_side(pos, Side::BLACK);

    [1, -1][pos.stm()] * score.taper(pos.phase)
}

fn eval_side(pos: &Position, side: usize) -> S {
    let mut score = S(0, 0);

    let side_bb = pos.side(side);
    let ksq = (pos.piece(Piece::KING) & side_bb).trailing_zeros();

    let flip = [56, 0][side] ^ if ksq % 8 > 3 { 7 } else { 0 };

    let pawns_bb = pos.piece(Piece::PAWN);

    for (piece, pst) in PST.iter().enumerate().take(Piece::KING + 1).skip(Piece::PAWN) {
        let mut bb = pos.piece(piece) & side_bb;

        bitloop!(|bb, sq| {
            let fsq = usize::from(sq) ^ flip;
            score += pst[fsq];

            match piece {
                Piece::PAWN => {
                    if RAILS[usize::from(sq) % 8] & pawns_bb & side_bb == 0 {
                        score += ISOLATED_PAWN_FILE[fsq % 8];
                    }

                    if SPANS[side][usize::from(sq)] & pawns_bb & pos.side(side ^ 1) == 0 {
                        score += PASSED_PAWN_PST[fsq];
                    }
                }
                Piece::ROOK => {
                    let file_bb = File::A << (sq % 8);
                    
                    if file_bb & pawns_bb & side_bb == 0 {
                        score += ROOK_SEMI_OPEN_FILE[fsq % 8];
                    }
    
                    if file_bb & pawns_bb == 0 {
                        score += ROOK_FULL_OPEN_FILE[fsq % 8];
                    }
                }
                _ => {}
            }
        });
    }

    score
}

#[derive(Clone, Copy, Default)]
pub struct S(i16, i16);

impl AddAssign<S> for S {
    fn add_assign(&mut self, rhs: S) {
        self.0 += rhs.0;
        self.1 += rhs.1;
    }
}

impl Sub<S> for S {
    type Output = S;

    fn sub(mut self, rhs: S) -> S {
        self.0 -= rhs.0;
        self.1 -= rhs.1;

        self
    }
}

impl S {
    fn taper(self, mut phase: i32) -> i32 {
        let mg = i32::from(self.0);
        let eg = i32::from(self.1);

        phase = phase.min(24);

        (mg * phase + (24 - phase) * eg) / 24
    }
}

static PST: [[S; 64]; 8] = [[S(0, 0); 64], [S(0, 0); 64],
    [
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
        S(216, 138), S(120, 158), S(202, 135), S(206, 126), S(197, 125), S(206, 130), S(181, 141), S(202, 146),
        S(175,  83), S(167,  81), S(187,  78), S(136, 104), S(110, 100), S(122,  91), S(104,  92), S( 76, 120),
        S(136,  78), S(111,  84), S(132,  75), S(124,  80), S(110,  85), S( 91,  89), S( 87,  87), S( 70, 104),
        S(112,  74), S( 99,  79), S(120,  76), S(103,  80), S(100,  84), S( 83,  85), S( 77,  77), S( 58,  95),
        S(129,  69), S(126,  71), S(114,  81), S( 87,  92), S( 70,  96), S( 66,  88), S( 70,  76), S( 54,  92),
        S(118,  71), S(144,  67), S(133,  85), S( 74, 108), S( 51, 100), S( 62,  95), S( 60,  81), S( 51, 101),
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
    ], [
        S(189, 229), S(290, 285), S(202, 336), S(336, 306), S(267, 319), S(226, 334), S(231, 305), S(170, 264),
        S(315, 284), S(301, 320), S(410, 297), S(386, 312), S(376, 321), S(369, 308), S(311, 314), S(286, 296),
        S(349, 292), S(392, 310), S(459, 311), S(426, 322), S(409, 325), S(401, 320), S(363, 310), S(307, 303),
        S(359, 304), S(346, 326), S(404, 334), S(378, 341), S(408, 334), S(378, 337), S(345, 321), S(326, 308),
        S(326, 298), S(357, 310), S(355, 331), S(363, 337), S(352, 339), S(358, 332), S(341, 316), S(315, 300),
        S(299, 283), S(347, 296), S(342, 307), S(359, 318), S(351, 322), S(332, 309), S(322, 303), S(296, 282),
        S(303, 284), S(315, 286), S(335, 290), S(320, 301), S(324, 296), S(310, 295), S(283, 295), S(268, 266),
        S(252, 237), S(299, 254), S(319, 273), S(293, 285), S(284, 284), S(266, 277), S(289, 241), S(237, 238),
    ], [
        S(324, 318), S(322, 328), S(225, 340), S(270, 335), S(274, 337), S(264, 328), S(272, 331), S(293, 322),
        S(357, 307), S(353, 325), S(401, 320), S(375, 325), S(360, 332), S(380, 329), S(380, 320), S(341, 314),
        S(392, 316), S(419, 323), S(426, 328), S(432, 330), S(417, 325), S(393, 334), S(404, 320), S(365, 321),
        S(366, 319), S(383, 335), S(413, 332), S(415, 336), S(429, 335), S(402, 327), S(383, 336), S(359, 324),
        S(372, 315), S(380, 325), S(382, 332), S(408, 333), S(406, 334), S(384, 338), S(376, 333), S(360, 317),
        S(376, 312), S(384, 316), S(384, 324), S(389, 330), S(385, 327), S(373, 329), S(381, 323), S(363, 310),
        S(373, 303), S(399, 303), S(388, 312), S(371, 324), S(361, 320), S(378, 309), S(363, 304), S(372, 301),
        S(328, 301), S(370, 301), S(352, 308), S(337, 316), S(332, 312), S(349, 291), S(354, 297), S(328, 291),
    ], [
        S(514, 556), S(499, 576), S(481, 584), S(498, 564), S(494, 558), S(487, 568), S(468, 577), S(484, 563),
        S(477, 570), S(486, 581), S(506, 579), S(487, 573), S(495, 566), S(482, 576), S(459, 583), S(452, 578),
        S(433, 578), S(490, 576), S(499, 573), S(510, 559), S(478, 561), S(479, 572), S(461, 575), S(445, 575),
        S(435, 565), S(436, 581), S(464, 577), S(478, 559), S(470, 559), S(447, 573), S(423, 579), S(421, 571),
        S(409, 549), S(420, 563), S(424, 566), S(442, 551), S(434, 555), S(419, 566), S(411, 566), S(409, 557),
        S(419, 529), S(440, 534), S(430, 546), S(438, 537), S(424, 541), S(414, 550), S(406, 553), S(405, 538),
        S(373, 543), S(431, 534), S(448, 534), S(445, 530), S(432, 532), S(429, 543), S(411, 543), S(407, 533),
        S(420, 523), S(419, 546), S(453, 537), S(457, 532), S(443, 539), S(439, 545), S(433, 536), S(439, 533),
    ], [
        S(1024, 1008), S(1012, 1017), S(1024, 1030), S(1005, 1039), S(987, 1044), S(981, 1041), S(965, 1032), S(938, 1028),
        S(1002, 994), S(930, 1064), S(996, 1054), S(951, 1088), S(946, 1080), S(940, 1073), S(916, 1065), S(929, 1022),
        S(989, 1016), S(1018, 1030), S(1029, 1043), S(1007, 1055), S(961, 1069), S(967, 1043), S(945, 1032), S(958, 981),
        S(985, 1004), S(961, 1049), S(968, 1071), S(976, 1064), S(969, 1061), S(953, 1047), S(944, 1033), S(947, 994),
        S(963, 995), S(971, 1013), S(960, 1030), S(960, 1037), S(955, 1044), S(959, 1018), S(946, 1011), S(952, 974),
        S(967, 935), S(979, 961), S(977, 983), S(969, 987), S(962, 991), S(960, 995), S(965, 967), S(945, 964),
        S(949, 901), S(990, 904), S(988, 918), S(975, 952), S(972, 954), S(974, 949), S(963, 958), S(944, 961),
        S(910, 897), S(912, 910), S(945, 908), S(956, 936), S(971, 925), S(946, 959), S(941, 949), S(951, 946),
    ], [
        S( 83, -45), S( 71,   1), S( 61,  -5), S( 72, -15), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 48,   1), S( 56,  30), S( 85,  21), S( 57,  15), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(  3,  24), S( 49,  38), S( 55,  33), S( 69,  23), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-26,  14), S(-24,  39), S(  7,  36), S(  1,  38), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-76,   9), S(-68,  27), S(-61,  35), S(-73,  43), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-71,   7), S(-45,  13), S(-69,  25), S(-75,  30), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(  4, -16), S(  8,  -9), S(-47,   9), S(-61,  11), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 14, -55), S( 27, -37), S(-27, -24), S( -5, -37), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    ],
];

const ROOK_SEMI_OPEN_FILE: [S; 8] = [S( 56,  22), S( 65,  -5), S( 30,  -6), S( 18,   3), S( 26,   3), S( 19,   0), S( 25,   1), S( 22,  17)];

const ROOK_FULL_OPEN_FILE: [S; 8] = [S( 65, -42), S( 42, -16), S( 37,  -6), S( 25,   5), S( 19,   9), S( 22,   9), S( 24,   2), S( 26,  -8)];

const ISOLATED_PAWN_FILE: [S; 8] = [S(-46,  -2), S(-14, -13), S(-23, -12), S(-32, -15), S(-34, -16), S(-24, -17), S(-19, -10), S(-10, -24)];

static PASSED_PAWN_PST: [S; 64] = [
    S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    S(116,  38), S( 20,  58), S(102,  35), S(106,  26), S( 97,  25), S(106,  30), S( 81,  41), S(102,  46),
    S( 30,  93), S( 26,  88), S( 48,  70), S( 51,  31), S( 75,  32), S( 77,  51), S(101,  57), S(117,  76),
    S( 21,  60), S( 39,  64), S( 13,  51), S( 10,  35), S( 32,  23), S( 37,  30), S( 53,  38), S( 53,  57),
    S( -5,  50), S(  6,  54), S( -7,  34), S( -6,  25), S( -1,  21), S(  1,  21), S( 24,  34), S( 31,  43),
    S(  5,  18), S( -8,  28), S( -6,  13), S(  2,  13), S(-10,   9), S( -8,  15), S( -1,  24), S( 11,  26),
    S( 13,   9), S( 13,  18), S( -0,   8), S( 20,  -1), S(  1,   5), S( -5,  17), S(  5,  26), S(  7,  22),
    S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
];
