use std::ops::{AddAssign, Sub};

use crate::{bitloop, consts::{File, Piece, Side}, position::Position};

pub fn eval(pos: &Position) -> i32 {
    let score = eval_side(pos, Side::WHITE) - eval_side(pos, Side::BLACK);

    [1, -1][pos.stm()] * score.taper(pos.phase)
}

fn eval_side(pos: &Position, side: usize) -> S {
    let mut score = S(0, 0);

    let side_bb = pos.side(side);
    let ksq = (pos.piece(Piece::KING) & side_bb).trailing_zeros();

    let flip = [56, 0][side] ^ if ksq % 8 > 3 { 7 } else { 0 };

    for piece in Piece::PAWN..=Piece::KING {
        let mut bb = pos.piece(piece) & side_bb;

        bitloop!(|bb, sq| {
            let fsq = usize::from(sq) ^ flip;
            score += PST[piece][fsq];

            if piece == Piece::ROOK {
                let pawns_bb = pos.piece(Piece::PAWN);
                let file_bb = File::A << (sq % 8);
                
                if file_bb & side_bb & pawns_bb == 0 {
                    score += ROOK_FRIENDLY_OPEN_FILE[fsq % 8];
                }
            }
        });
    }

    score
}

#[derive(Clone, Copy, Default)]
pub struct S(i16, i16);

impl AddAssign<S> for S {
    fn add_assign(&mut self, rhs: S) {
        self.0 += rhs.0;
        self.1 += rhs.1;
    }
}

impl Sub<S> for S {
    type Output = S;

    fn sub(mut self, rhs: S) -> S {
        self.0 -= rhs.0;
        self.1 -= rhs.1;

        self
    }
}

impl S {
    fn taper(self, mut phase: i32) -> i32 {
        let mg = i32::from(self.0);
        let eg = i32::from(self.1);

        phase = phase.min(24);

        (mg * phase + (24 - phase) * eg) / 24
    }
}

static PST: [[S; 64]; 8] = [[S(0, 0); 64], [S(0, 0); 64],
[
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
        S(258, 175), S(158, 200), S(269, 165), S(274, 149), S(266, 147), S(277, 157), S(253, 178), S(272, 172),
        S(149, 154), S(180, 147), S(177, 128), S(164, 128), S(160, 127), S(159, 128), S(134, 145), S(100, 169),
        S(115, 112), S(134, 111), S(120,  96), S(123,  92), S(111,  96), S( 92, 103), S( 95, 118), S( 78, 125),
        S( 96, 102), S(126, 101), S(113,  90), S(103,  88), S( 96,  92), S( 82,  94), S( 86, 107), S( 65, 111),
        S(116,  94), S(152,  94), S(105,  94), S( 88, 102), S( 71, 106), S( 64,  98), S( 79, 109), S( 60, 108),
        S(106,  96), S(172,  91), S(127,  99), S( 77, 116), S( 53, 111), S( 62, 107), S( 70, 116), S( 59, 116),
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
    ], [
        S(194, 224), S(288, 282), S(201, 330), S(337, 299), S(273, 311), S(225, 329), S(234, 299), S(168, 260),
        S(310, 276), S(301, 316), S(413, 290), S(381, 306), S(370, 316), S(367, 302), S(310, 310), S(282, 290),
        S(342, 287), S(382, 307), S(450, 307), S(420, 317), S(404, 320), S(395, 316), S(356, 306), S(303, 299),
        S(353, 300), S(338, 321), S(395, 330), S(368, 336), S(399, 328), S(370, 332), S(338, 316), S(319, 306),
        S(318, 292), S(348, 306), S(348, 327), S(354, 333), S(345, 333), S(349, 328), S(336, 311), S(309, 294),
        S(293, 275), S(339, 291), S(333, 301), S(351, 313), S(343, 316), S(324, 304), S(315, 296), S(290, 274),
        S(296, 277), S(308, 282), S(328, 284), S(313, 296), S(317, 290), S(303, 288), S(278, 288), S(263, 260),
        S(243, 233), S(292, 251), S(311, 268), S(285, 280), S(277, 280), S(258, 271), S(283, 238), S(231, 237),
    ], [
        S(317, 312), S(316, 322), S(221, 332), S(267, 329), S(271, 332), S(266, 320), S(271, 323), S(291, 314),
        S(347, 300), S(348, 319), S(395, 314), S(370, 318), S(353, 325), S(376, 322), S(374, 314), S(333, 307),
        S(380, 311), S(409, 319), S(416, 323), S(425, 323), S(411, 318), S(387, 327), S(397, 315), S(356, 317),
        S(354, 316), S(374, 331), S(405, 327), S(405, 330), S(418, 328), S(396, 321), S(374, 331), S(351, 319),
        S(363, 308), S(371, 320), S(373, 325), S(396, 327), S(396, 328), S(372, 333), S(367, 326), S(351, 310),
        S(368, 304), S(374, 308), S(374, 319), S(380, 324), S(374, 322), S(363, 324), S(371, 315), S(353, 302),
        S(364, 294), S(389, 297), S(379, 307), S(360, 319), S(352, 316), S(368, 303), S(354, 298), S(361, 293),
        S(318, 296), S(361, 294), S(342, 303), S(327, 311), S(322, 307), S(341, 284), S(343, 291), S(318, 287),
    ], [
        S(519, 543), S(503, 565), S(499, 568), S(510, 551), S(497, 548), S(496, 556), S(475, 565), S(486, 553),
        S(486, 553), S(494, 570), S(529, 563), S(496, 560), S(501, 555), S(491, 564), S(468, 572), S(455, 568),
        S(431, 567), S(485, 570), S(497, 566), S(513, 549), S(480, 552), S(482, 564), S(459, 567), S(445, 566),
        S(429, 556), S(428, 576), S(463, 570), S(476, 550), S(464, 551), S(443, 566), S(417, 572), S(417, 564),
        S(402, 538), S(412, 555), S(422, 557), S(437, 541), S(428, 546), S(414, 557), S(405, 558), S(404, 548),
        S(417, 515), S(434, 527), S(429, 536), S(434, 527), S(417, 531), S(411, 539), S(401, 543), S(400, 528),
        S(375, 529), S(425, 528), S(446, 525), S(441, 520), S(426, 523), S(425, 531), S(407, 533), S(401, 524),
        S(415, 515), S(411, 541), S(448, 529), S(452, 524), S(437, 530), S(435, 535), S(427, 527), S(433, 524),
    ], [
        S(1013, 992), S(1002, 1002), S(1015, 1014), S(996, 1022), S(975, 1029), S(970, 1027), S(955, 1018), S(927, 1014),
        S(985, 980), S(918, 1054), S(990, 1039), S(942, 1074), S(933, 1069), S(931, 1059), S(908, 1051), S(915, 1012),
        S(977, 1000), S(1004, 1019), S(1018, 1028), S(996, 1039), S(951, 1054), S(958, 1029), S(934, 1020), S(948, 971),
        S(973, 988), S(949, 1034), S(956, 1059), S(963, 1050), S(957, 1045), S(942, 1032), S(933, 1020), S(936, 981),
        S(952, 980), S(960, 999), S(948, 1015), S(948, 1022), S(943, 1032), S(947, 1002), S(934, 998), S(939, 960),
        S(955, 921), S(966, 948), S(965, 969), S(957, 973), S(949, 976), S(948, 980), S(953, 952), S(933, 953),
        S(938, 892), S(976, 895), S(976, 906), S(962, 939), S(959, 941), S(962, 937), S(951, 946), S(932, 947),
        S(900, 886), S(901, 902), S(932, 899), S(943, 926), S(959, 911), S(933, 948), S(929, 937), S(940, 934),
    ], [
        S( 86, -43), S( 70,   1), S( 61,  -5), S( 70, -16), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 46,   7), S( 56,  31), S( 84,  21), S( 53,  15), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( -3,  31), S( 47,  41), S( 49,  34), S( 63,  24), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-35,  20), S(-31,  42), S( -2,  38), S( -4,  38), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-72,   8), S(-69,  27), S(-63,  34), S(-74,  42), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-64,   3), S(-42,  10), S(-70,  23), S(-74,  29), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(  5, -18), S( 10, -11), S(-46,   7), S(-59,   9), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 13, -55), S( 28, -37), S(-25, -25), S( -4, -38), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    ],
];

const ROOK_FRIENDLY_OPEN_FILE: [S; 8] = [S( 66,   5), S( 68, -12), S( 25,  -4), S( 21,  11), S( 30,  13), S( 22,   9), S( 28,   5), S( 29,  11)];
