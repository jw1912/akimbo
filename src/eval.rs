use std::ops::{AddAssign, Sub};

use crate::{attacks::Attacks, bitloop, consts::{File, Piece, Side, MOBILITY_OFFSET, RAILS, SPANS}, position::Position};

pub fn eval(pos: &Position) -> i32 {
    let score = eval_side(pos, Side::WHITE) - eval_side(pos, Side::BLACK);

    [1, -1][pos.stm()] * score.taper(pos.phase)
}

fn eval_side(pos: &Position, side: usize) -> S {
    let mut score = S(0, 0);

    let side_bb = pos.side(side);
    let ksq = (pos.piece(Piece::KING) & side_bb).trailing_zeros();

    let flip = [56, 0][side] ^ if ksq % 8 > 3 { 7 } else { 0 };

    let pawns_bb = pos.piece(Piece::PAWN);

    let our_pawns = side_bb & pawns_bb;

    let pawn_defends = if side == Side::WHITE {
        Attacks::white_pawn_setwise(our_pawns)
    } else {
        Attacks::black_pawn_setwise(our_pawns)
    } & side_bb;

    for piece in Piece::PAWN..=Piece::KING {
        let defended = (pawn_defends & pos.piece(piece)).count_ones();
        score += PAWN_DEFENDS[8 * (piece - 2) + defended as usize];
    }

    let mut phalanx = our_pawns & ((our_pawns & !File::A) >> 1);
    bitloop!(|phalanx, sq| score += PHALANX_PAWNS[(usize::from(sq) ^ flip) / 8]);

    let opp_pawns = pos.side(side ^ 1) & pawns_bb;

    let pawn_threats = if side == Side::WHITE {
        Attacks::black_pawn_setwise(opp_pawns)
    } else {
        Attacks::white_pawn_setwise(opp_pawns)
    };

    let safe = !pawn_threats;

    let occ = pos.side(side) ^ pos.side(side ^ 1);

    if (side_bb & pos.piece(Piece::BISHOP)).count_ones() > 1 {
        score += BISHOP_PAIR;
    }

    for (piece, pst) in PST.iter().enumerate().take(Piece::KING + 1).skip(Piece::PAWN) {
        let mut bb = pos.piece(piece) & side_bb;

        let mobility_offset = MOBILITY_OFFSET[piece];

        bitloop!(|bb, sq| {
            let sq = usize::from(sq);
            let fsq = sq ^ flip;

            score += pst[fsq];

            if mobility_offset != usize::MAX {
                let attacks = Attacks::for_piece(piece, side, sq, occ);
                let mobility = (attacks & safe).count_ones() as usize;
                score += MOBILITY[mobility_offset + mobility];
            }

            match piece {
                Piece::PAWN => {
                    if RAILS[sq % 8] & pawns_bb & side_bb == 0 {
                        score += ISOLATED_PAWN_FILE[fsq % 8];
                    }

                    if SPANS[side][sq] & pawns_bb & pos.side(side ^ 1) == 0 {
                        score += PASSED_PAWN_PST[fsq];
                    }
                }
                Piece::ROOK => {
                    let file_bb = File::A << (sq % 8);
                    
                    if file_bb & pawns_bb & side_bb == 0 {
                        score += ROOK_SEMI_OPEN_FILE[fsq % 8];
                    }
    
                    if file_bb & pawns_bb == 0 {
                        score += ROOK_FULL_OPEN_FILE[fsq % 8];
                    }
                }
                _ => {}
            }
        });
    }

    score
}

#[derive(Clone, Copy, Default)]
pub struct S(i16, i16);

impl AddAssign<S> for S {
    fn add_assign(&mut self, rhs: S) {
        self.0 += rhs.0;
        self.1 += rhs.1;
    }
}

impl Sub<S> for S {
    type Output = S;

    fn sub(mut self, rhs: S) -> S {
        self.0 -= rhs.0;
        self.1 -= rhs.1;

        self
    }
}

impl S {
    fn taper(self, mut phase: i32) -> i32 {
        let mg = i32::from(self.0);
        let eg = i32::from(self.1);

        phase = phase.min(24);

        (mg * phase + (24 - phase) * eg) / 24
    }
}

static PST: [[S; 64]; 8] = [[S(0, 0); 64], [S(0, 0); 64],
[
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
        S(211, 144), S(109, 165), S(191, 142), S(193, 133), S(181, 133), S(191, 137), S(168, 149), S(195, 152),
        S(174,  87), S(157,  87), S(167,  85), S(115, 109), S( 92, 105), S(102, 100), S( 89,  99), S( 73, 124),
        S(137,  82), S( 96,  87), S(118,  79), S(104,  86), S( 92,  90), S( 77,  94), S( 69,  91), S( 66, 109),
        S(114,  77), S( 89,  81), S(112,  79), S( 91,  83), S( 83,  88), S( 74,  88), S( 59,  82), S( 58,  98),
        S(129,  72), S(128,  71), S(115,  83), S( 97,  92), S( 78,  96), S( 65,  91), S( 67,  78), S( 55,  96),
        S(128,  72), S(156,  68), S(148,  83), S( 90, 107), S( 73,  97), S( 72,  96), S( 64,  84), S( 62, 103),
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
    ], [
        S(228, 275), S(303, 301), S(203, 342), S(329, 313), S(256, 327), S(206, 343), S(235, 321), S(204, 310),
        S(329, 303), S(296, 328), S(392, 290), S(374, 305), S(353, 316), S(352, 301), S(298, 324), S(293, 317),
        S(348, 301), S(364, 301), S(419, 299), S(376, 313), S(361, 314), S(354, 310), S(330, 303), S(296, 312),
        S(358, 312), S(325, 315), S(362, 321), S(348, 324), S(375, 317), S(337, 322), S(320, 308), S(320, 316),
        S(330, 311), S(339, 300), S(330, 314), S(331, 323), S(326, 321), S(320, 317), S(319, 305), S(313, 308),
        S(291, 295), S(319, 290), S(301, 292), S(321, 304), S(312, 310), S(294, 295), S(297, 293), S(290, 290),
        S(308, 315), S(312, 299), S(317, 283), S(307, 294), S(314, 290), S(297, 286), S(278, 306), S(285, 286),
        S(278, 283), S(306, 285), S(308, 286), S(296, 294), S(289, 293), S(268, 285), S(301, 274), S(268, 277),
    ], [
        S(295, 320), S(291, 324), S(184, 335), S(230, 330), S(227, 332), S(225, 327), S(229, 331), S(255, 329),
        S(320, 313), S(294, 317), S(341, 312), S(316, 314), S(306, 322), S(319, 320), S(319, 313), S(300, 320),
        S(345, 317), S(361, 314), S(366, 312), S(365, 315), S(348, 310), S(330, 320), S(342, 311), S(321, 318),
        S(323, 320), S(336, 318), S(353, 316), S(354, 316), S(372, 315), S(342, 309), S(334, 318), S(314, 319),
        S(349, 309), S(330, 313), S(324, 314), S(356, 313), S(353, 314), S(331, 321), S(322, 317), S(327, 309),
        S(344, 316), S(338, 306), S(336, 312), S(342, 315), S(337, 314), S(325, 313), S(337, 311), S(333, 308),
        S(348, 313), S(363, 297), S(350, 304), S(332, 314), S(323, 310), S(338, 302), S(327, 297), S(358, 304),
        S(325, 315), S(344, 305), S(327, 310), S(317, 312), S(310, 308), S(333, 294), S(337, 299), S(323, 300),
    ], [
        S(549, 529), S(530, 550), S(513, 558), S(519, 541), S(515, 534), S(509, 543), S(503, 549), S(514, 538),
        S(517, 543), S(516, 557), S(539, 555), S(518, 548), S(524, 542), S(513, 551), S(492, 558), S(490, 554),
        S(482, 553), S(535, 548), S(546, 546), S(546, 534), S(519, 535), S(518, 547), S(508, 548), S(491, 551),
        S(481, 541), S(486, 553), S(507, 552), S(520, 533), S(510, 532), S(487, 548), S(470, 552), S(469, 548),
        S(449, 526), S(464, 536), S(465, 540), S(482, 525), S(472, 528), S(460, 539), S(455, 540), S(453, 535),
        S(458, 508), S(476, 508), S(475, 518), S(479, 508), S(469, 513), S(455, 524), S(449, 527), S(446, 519),
        S(419, 518), S(475, 506), S(495, 505), S(493, 499), S(481, 502), S(476, 512), S(459, 514), S(453, 510),
        S(466, 497), S(461, 515), S(500, 506), S(505, 498), S(492, 503), S(487, 510), S(479, 505), S(479, 507),
    ], [
        S(1024, 972), S(1002, 982), S(998, 1001), S(971, 1008), S(950, 1014), S(940, 1015), S(940, 1002), S(933, 988),
        S(997, 974), S(898, 1042), S(957, 1032), S(910, 1067), S(907, 1054), S(902, 1042), S(882, 1037), S(912, 1001),
        S(974, 1008), S(998, 1003), S(1006, 1011), S(970, 1023), S(922, 1038), S(935, 1006), S(923, 998), S(941, 959),
        S(966, 994), S(944, 1022), S(940, 1037), S(946, 1024), S(939, 1016), S(922, 1006), S(927, 989), S(930, 967),
        S(947, 979), S(948, 986), S(937, 989), S(932, 997), S(929, 999), S(936, 974), S(925, 968), S(935, 947),
        S(957, 916), S(960, 927), S(958, 942), S(952, 941), S(938, 952), S(936, 953), S(945, 928), S(933, 936),
        S(942, 884), S(969, 879), S(967, 885), S(955, 915), S(953, 916), S(951, 917), S(942, 925), S(939, 926),
        S(919, 876), S(908, 888), S(939, 879), S(956, 889), S(963, 892), S(943, 911), S(941, 909), S(941, 917),
    ], [
        S( 83, -48), S( 79,  -0), S( 68,  -7), S( 84, -17), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 54,  -0), S( 68,  29), S( 98,  19), S( 74,  13), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 14,  21), S( 70,  35), S( 77,  30), S( 85,  22), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-19,  12), S(  4,  32), S( 29,  32), S( 21,  35), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-67,   8), S(-51,  23), S(-43,  31), S(-61,  41), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-70,   8), S(-27,   9), S(-63,  24), S(-68,  30), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( -2, -14), S(  2,  -6), S(-51,  12), S(-68,  15), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(  2, -54), S( 19, -34), S(-32, -19), S(-10, -32), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    ],
];

const ROOK_SEMI_OPEN_FILE: [S; 8] = [S( 48,  22), S( 64,  -5), S( 26, -10), S( 16,   3), S( 25,   3), S( 15,  -1), S( 19,   1), S( 16,  14)];

const ROOK_FULL_OPEN_FILE: [S; 8] = [S( 61, -50), S( 39, -23), S( 34,  -9), S( 21,   0), S( 13,   4), S( 20,   5), S( 21,  -4), S( 21, -15)];

const ISOLATED_PAWN_FILE: [S; 8] = [S(-48,  -3), S(-12, -12), S(-24, -13), S(-32, -15), S(-32, -16), S(-25, -17), S(-18, -10), S(-16, -24)];

static PASSED_PAWN_PST: [S; 64] = [
    S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    S(111,  44), S(  9,  65), S( 91,  42), S( 93,  33), S( 81,  33), S( 91,  37), S( 68,  49), S( 95,  52),
    S( 26,  98), S( 25,  89), S( 49,  73), S( 48,  36), S( 71,  36), S( 73,  53), S(100,  59), S(110,  81),
    S( 15,  62), S( 39,  66), S( 12,  53), S(  9,  36), S( 29,  25), S( 36,  32), S( 51,  40), S( 53,  58),
    S( -9,  53), S(  9,  56), S( -7,  36), S( -4,  26), S(  4,  20), S( -1,  22), S( 27,  35), S( 30,  44),
    S(  3,  18), S(-15,  31), S( -7,  14), S( -1,  14), S(-14,  10), S(-10,  14), S( -7,  25), S( 12,  24),
    S(  7,   9), S(  5,  18), S( -4,   9), S( 18,  -2), S( -4,   3), S(-10,  17), S( -4,  27), S(  5,  20),
    S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
];

static MOBILITY: [S; 66] = [
    S(-80, -59), S(-30, -53), S( -3, -18), S( 15,   9), S( 31,  18), S( 34,  34),
    S( 48,  35), S( 62,  38), S( 75,  32), S(-74, -107), S(-39, -53), S( -2, -28),
    S(  8,   3), S( 24,  11), S( 38,  19), S( 46,  26), S( 52,  32), S( 57,  35),
    S( 61,  38), S( 66,  41), S( 77,  38), S( 93,  34), S(112,  36), S(-50, -39),
    S(-32, -15), S(-37,   9), S(-35,  39), S(-28,  47), S(-23,  54), S(-19,  62),
    S(-14,  68), S(-10,  70), S( -3,  73), S(  1,  77), S(  6,  78), S( 12,  79),
    S( 21,  75), S( 18,  79), S(  0,   0), S(  0,   0), S(-10,  -6), S(  8, -24),
    S(  6,  -0), S( 37,  13), S( 39,  48), S( 39,  81), S( 44,  96), S( 48, 114),
    S( 54, 125), S( 61, 127), S( 68, 128), S( 71, 137), S( 76, 138), S( 76, 147),
    S( 79, 152), S( 79, 158), S( 85, 157), S( 91, 157), S( 94, 161), S(101, 158),
    S(117, 150), S(131, 142), S(140, 134), S(126, 141), S( 91, 116), S( 69,  89),
];

const BISHOP_PAIR: S = S( 34,  58);

static PAWN_DEFENDS: [S; 48] = [
    S( -2,  -6), S(  2,   5), S(  4,   6), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    S( -1,  -4), S(  2,   2), S( -6,  17), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    S( -6,  -5), S(  2,   5), S( 19,   3), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    S(  4, -13), S( -7,  11), S( 13,   7), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    S( 37, -12), S(-37,  12), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    S(  0,   0), S( 75, 147), S(132, 138), S( 57,  53), S( 25,  11), S( -4,   2), S( -4,  -3), S(  0,   0),
];

const PHALANX_PAWNS: [S; 8] = [S(  0,   0), S( 75, 147), S(132, 138), S( 57,  53), S( 25,  11), S( -4,   2), S( -4,  -3), S(  0,   0)];
