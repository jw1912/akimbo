use std::ops::{AddAssign, Sub};

use crate::{bitloop, consts::{File, Piece, Side, RAILS, SPANS}, position::Position};

pub fn eval(pos: &Position) -> i32 {
    let score = eval_side(pos, Side::WHITE) - eval_side(pos, Side::BLACK);

    [1, -1][pos.stm()] * score.taper(pos.phase)
}

fn eval_side(pos: &Position, side: usize) -> S {
    let mut score = S(0, 0);

    let side_bb = pos.side(side);
    let ksq = (pos.piece(Piece::KING) & side_bb).trailing_zeros();

    let flip = [56, 0][side] ^ if ksq % 8 > 3 { 7 } else { 0 };

    let pawns_bb = pos.piece(Piece::PAWN);

    for piece in Piece::PAWN..=Piece::KING {
        let mut bb = pos.piece(piece) & side_bb;

        bitloop!(|bb, sq| {
            let fsq = usize::from(sq) ^ flip;
            score += PST[piece][fsq];

            match piece {
                Piece::PAWN => {
                    if RAILS[usize::from(sq) % 8] & pawns_bb & side_bb == 0 {
                        score += ISOLATED_PAWN_FILE[fsq % 8];
                    }

                    if SPANS[side][usize::from(sq)] & pawns_bb & pos.side(side ^ 1) == 0 {
                        score += PASSED_PAWN_FILE[fsq % 8];
                    }
                }
                Piece::ROOK => {
                    let file_bb = File::A << (sq % 8);
                    
                    if file_bb & pawns_bb & side_bb == 0 {
                        score += ROOK_SEMI_OPEN_FILE[fsq % 8];
                    }
    
                    if file_bb & pawns_bb == 0 {
                        score += ROOK_FULL_OPEN_FILE[fsq % 8];
                    }
                }
                _ => {}
            }
        });
    }

    score
}

#[derive(Clone, Copy, Default)]
pub struct S(i16, i16);

impl AddAssign<S> for S {
    fn add_assign(&mut self, rhs: S) {
        self.0 += rhs.0;
        self.1 += rhs.1;
    }
}

impl Sub<S> for S {
    type Output = S;

    fn sub(mut self, rhs: S) -> S {
        self.0 -= rhs.0;
        self.1 -= rhs.1;

        self
    }
}

impl S {
    fn taper(self, mut phase: i32) -> i32 {
        let mg = i32::from(self.0);
        let eg = i32::from(self.1);

        phase = phase.min(24);

        (mg * phase + (24 - phase) * eg) / 24
    }
}

static PST: [[S; 64]; 8] = [[S(0, 0); 64], [S(0, 0); 64],
[
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
        S(274, 144), S(145, 164), S(267, 146), S(272, 136), S(259, 137), S(271, 143), S(229, 149), S(261, 152),
        S(171, 122), S(172, 112), S(187, 109), S(164, 112), S(155, 114), S(154, 115), S(123, 114), S( 92, 150),
        S(135,  83), S(109,  86), S(130,  80), S(122,  82), S(111,  86), S( 92,  91), S( 85,  87), S( 70, 108),
        S(109,  75), S( 98,  76), S(118,  75), S(100,  78), S( 96,  82), S( 80,  82), S( 73,  74), S( 56,  94),
        S(127,  67), S(125,  68), S(112,  79), S( 84,  91), S( 68,  93), S( 62,  86), S( 66,  74), S( 52,  90),
        S(117,  69), S(143,  66), S(131,  83), S( 72, 107), S( 50,  99), S( 59,  95), S( 57,  81), S( 49,  99),
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
    ], [
        S(190, 227), S(289, 285), S(202, 334), S(337, 305), S(266, 318), S(226, 334), S(231, 304), S(170, 264),
        S(315, 282), S(302, 320), S(411, 296), S(386, 311), S(376, 321), S(368, 308), S(311, 314), S(284, 295),
        S(349, 291), S(391, 310), S(458, 310), S(426, 322), S(409, 324), S(401, 320), S(362, 310), S(305, 303),
        S(359, 303), S(345, 325), S(403, 334), S(377, 340), S(407, 333), S(378, 336), S(344, 319), S(325, 306),
        S(326, 295), S(357, 308), S(354, 330), S(362, 335), S(352, 337), S(357, 331), S(340, 314), S(314, 297),
        S(299, 280), S(347, 295), S(341, 305), S(358, 316), S(350, 320), S(331, 307), S(322, 301), S(296, 278),
        S(302, 282), S(314, 285), S(335, 288), S(320, 300), S(324, 294), S(310, 292), S(283, 292), S(268, 262),
        S(252, 237), S(298, 254), S(318, 272), S(292, 284), S(283, 283), S(265, 275), S(288, 240), S(238, 237),
    ], [
        S(323, 316), S(321, 327), S(225, 338), S(270, 334), S(275, 337), S(266, 327), S(273, 329), S(293, 321),
        S(358, 305), S(353, 323), S(400, 319), S(375, 323), S(360, 331), S(379, 328), S(379, 319), S(339, 312),
        S(392, 314), S(418, 323), S(425, 326), S(432, 328), S(418, 323), S(393, 333), S(403, 320), S(364, 320),
        S(365, 319), S(383, 334), S(413, 331), S(414, 335), S(427, 333), S(401, 325), S(383, 335), S(357, 323),
        S(372, 312), S(380, 323), S(381, 330), S(407, 331), S(406, 332), S(383, 337), S(375, 331), S(359, 314),
        S(376, 308), S(384, 313), S(383, 323), S(388, 328), S(385, 326), S(372, 328), S(380, 320), S(363, 307),
        S(373, 299), S(398, 302), S(387, 311), S(370, 322), S(360, 319), S(377, 307), S(362, 302), S(372, 296),
        S(327, 301), S(370, 299), S(352, 308), S(336, 315), S(332, 311), S(348, 290), S(354, 295), S(327, 290),
    ], [
        S(510, 555), S(497, 575), S(481, 581), S(499, 562), S(493, 556), S(487, 565), S(467, 575), S(481, 562),
        S(475, 567), S(485, 581), S(506, 578), S(486, 572), S(495, 565), S(481, 574), S(458, 582), S(450, 576),
        S(433, 576), S(486, 576), S(496, 573), S(508, 558), S(478, 560), S(479, 571), S(460, 574), S(446, 572),
        S(436, 562), S(434, 580), S(463, 576), S(477, 558), S(469, 558), S(447, 572), S(421, 578), S(422, 568),
        S(410, 544), S(420, 559), S(424, 563), S(442, 548), S(434, 552), S(419, 564), S(410, 564), S(409, 553),
        S(419, 524), S(440, 531), S(430, 543), S(437, 534), S(423, 538), S(414, 547), S(406, 550), S(404, 535),
        S(373, 538), S(430, 531), S(447, 531), S(444, 527), S(431, 529), S(428, 540), S(410, 540), S(405, 529),
        S(420, 521), S(418, 544), S(452, 535), S(456, 530), S(442, 537), S(438, 543), S(432, 535), S(438, 531),
    ], [
        S(1024, 1005), S(1011, 1014), S(1023, 1027), S(1005, 1034), S(987, 1040), S(979, 1038), S(963, 1030), S(935, 1027),
        S(1001, 991), S(930, 1063), S(994, 1052), S(950, 1086), S(945, 1079), S(937, 1072), S(914, 1064), S(922, 1024),
        S(988, 1012), S(1017, 1028), S(1028, 1041), S(1005, 1052), S(959, 1067), S(965, 1042), S(942, 1030), S(954, 979),
        S(984, 999), S(959, 1045), S(966, 1069), S(974, 1062), S(968, 1058), S(950, 1045), S(942, 1030), S(945, 990),
        S(962, 991), S(970, 1009), S(958, 1027), S(958, 1035), S(953, 1043), S(957, 1015), S(944, 1007), S(950, 969),
        S(965, 932), S(978, 958), S(976, 980), S(967, 985), S(960, 988), S(958, 992), S(963, 963), S(944, 961),
        S(948, 898), S(987, 903), S(986, 916), S(973, 950), S(970, 951), S(972, 946), S(961, 954), S(941, 957),
        S(909, 895), S(912, 906), S(943, 908), S(954, 934), S(969, 923), S(944, 957), S(939, 948), S(949, 944),
    ], [
        S( 90, -43), S( 75,   2), S( 67,  -4), S( 77, -15), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 54,   5), S( 63,  32), S( 94,  21), S( 63,  16), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(  5,  27), S( 55,  40), S( 58,  34), S( 72,  24), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-28,  17), S(-24,  41), S(  5,  37), S(  1,  38), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-73,   8), S(-68,  26), S(-61,  34), S(-73,  42), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-69,   4), S(-45,  11), S(-70,  23), S(-76,  30), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(  3, -17), S(  8, -10), S(-48,   8), S(-62,  11), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 13, -56), S( 26, -37), S(-28, -24), S( -7, -37), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    ],
];

const ROOK_SEMI_OPEN_FILE: [S; 8] = [S( 56,  18), S( 66,  -7), S( 31,  -7), S( 18,   3), S( 26,   2), S( 19,  -1), S( 26,  -1), S( 23,  13)];

const ROOK_FULL_OPEN_FILE: [S; 8] = [S( 63, -36), S( 41, -14), S( 37,  -5), S( 25,   5), S( 18,  10), S( 22,  11), S( 23,   4), S( 25,  -4)];

const ISOLATED_PAWN_FILE: [S; 8] = [S(-45,  -2), S(-15, -11), S(-23, -12), S(-32, -16), S(-35, -16), S(-24, -17), S(-19,  -9), S(-11, -25)];

const PASSED_PAWN_FILE: [S; 8] = [S(  2,  41), S( -3,  49), S(  1,  30), S(  8,  24), S( 18,  18), S( 15,  23), S( 26,  33), S( 23,  43)];
