use std::ops::{AddAssign, Sub};

use crate::{bitloop, consts::{File, Piece, Side, RAILS}, position::Position};

pub fn eval(pos: &Position) -> i32 {
    let score = eval_side(pos, Side::WHITE) - eval_side(pos, Side::BLACK);

    [1, -1][pos.stm()] * score.taper(pos.phase)
}

fn eval_side(pos: &Position, side: usize) -> S {
    let mut score = S(0, 0);

    let side_bb = pos.side(side);
    let ksq = (pos.piece(Piece::KING) & side_bb).trailing_zeros();

    let flip = [56, 0][side] ^ if ksq % 8 > 3 { 7 } else { 0 };

    let pawns_bb = pos.piece(Piece::PAWN);

    for piece in Piece::PAWN..=Piece::KING {
        let mut bb = pos.piece(piece) & side_bb;

        bitloop!(|bb, sq| {
            let fsq = usize::from(sq) ^ flip;
            score += PST[piece][fsq];

            match piece {
                Piece::PAWN => {
                    if RAILS[usize::from(sq) % 8] & pawns_bb & side_bb == 0 {
                        score += ISOLATED_PAWN_FILE[fsq % 8];
                    }
                }
                Piece::ROOK => {
                    let file_bb = File::A << (sq % 8);
                    
                    if file_bb & pawns_bb & side_bb == 0 {
                        score += ROOK_SEMI_OPEN_FILE[fsq % 8];
                    }
    
                    if file_bb & pawns_bb == 0 {
                        score += ROOK_FULL_OPEN_FILE[fsq % 8];
                    }
                }
                _ => {}
            }
        });
    }

    score
}

#[derive(Clone, Copy, Default)]
pub struct S(i16, i16);

impl AddAssign<S> for S {
    fn add_assign(&mut self, rhs: S) {
        self.0 += rhs.0;
        self.1 += rhs.1;
    }
}

impl Sub<S> for S {
    type Output = S;

    fn sub(mut self, rhs: S) -> S {
        self.0 -= rhs.0;
        self.1 -= rhs.1;

        self
    }
}

impl S {
    fn taper(self, mut phase: i32) -> i32 {
        let mg = i32::from(self.0);
        let eg = i32::from(self.1);

        phase = phase.min(24);

        (mg * phase + (24 - phase) * eg) / 24
    }
}

static PST: [[S; 64]; 8] = [[S(0, 0); 64], [S(0, 0); 64],
    [
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
        S(272, 167), S(143, 208), S(267, 168), S(275, 155), S(269, 154), S(280, 162), S(255, 181), S(274, 175),
        S(169, 144), S(161, 155), S(182, 129), S(167, 132), S(169, 132), S(163, 131), S(136, 145), S( 99, 173),
        S(133, 103), S(103, 121), S(127,  96), S(123,  96), S(115, 101), S( 95, 105), S( 96, 117), S( 76, 128),
        S(108,  94), S( 93, 111), S(117,  89), S(100,  91), S( 99,  96), S( 83,  95), S( 85, 105), S( 63, 114),
        S(126,  87), S(120, 103), S(110,  94), S( 86, 104), S( 71, 109), S( 66,  99), S( 78, 105), S( 58, 110),
        S(116,  89), S(138, 100), S(130,  98), S( 74, 121), S( 52, 115), S( 62, 109), S( 69, 112), S( 55, 119),
        S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100), S(100, 100),
    ], [
        S(191, 224), S(285, 283), S(200, 330), S(339, 300), S(268, 314), S(227, 330), S(233, 300), S(170, 261),
        S(312, 276), S(299, 316), S(410, 291), S(385, 307), S(376, 316), S(369, 303), S(310, 310), S(284, 290),
        S(348, 287), S(389, 307), S(456, 307), S(425, 317), S(409, 320), S(400, 316), S(362, 307), S(306, 300),
        S(357, 301), S(344, 321), S(403, 330), S(376, 336), S(407, 329), S(377, 332), S(344, 316), S(325, 306),
        S(325, 292), S(356, 305), S(354, 327), S(362, 332), S(352, 333), S(357, 328), S(341, 311), S(314, 294),
        S(299, 275), S(346, 291), S(340, 302), S(358, 313), S(349, 316), S(331, 304), S(321, 297), S(296, 274),
        S(302, 278), S(314, 281), S(334, 285), S(319, 296), S(323, 290), S(310, 288), S(283, 288), S(268, 259),
        S(250, 234), S(298, 251), S(318, 268), S(291, 280), S(283, 279), S(265, 271), S(288, 236), S(238, 237),
    ], [
        S(319, 313), S(318, 323), S(224, 334), S(269, 331), S(273, 334), S(267, 322), S(274, 325), S(294, 317),
        S(355, 301), S(350, 320), S(399, 316), S(374, 320), S(359, 327), S(379, 324), S(379, 315), S(339, 308),
        S(390, 311), S(417, 319), S(424, 323), S(431, 324), S(418, 320), S(393, 329), S(403, 317), S(365, 317),
        S(364, 316), S(382, 331), S(412, 328), S(413, 331), S(427, 330), S(401, 322), S(383, 332), S(357, 320),
        S(371, 308), S(380, 319), S(381, 326), S(406, 328), S(405, 329), S(383, 333), S(375, 327), S(359, 310),
        S(376, 304), S(383, 309), S(383, 320), S(388, 325), S(384, 322), S(371, 324), S(380, 316), S(363, 302),
        S(373, 295), S(398, 298), S(386, 306), S(370, 319), S(360, 316), S(377, 303), S(361, 298), S(372, 293),
        S(327, 297), S(370, 294), S(351, 304), S(335, 311), S(331, 307), S(348, 286), S(353, 291), S(326, 287),
    ], [
        S(509, 549), S(495, 571), S(477, 577), S(498, 558), S(491, 552), S(487, 561), S(466, 571), S(481, 558),
        S(472, 561), S(480, 577), S(504, 572), S(486, 567), S(494, 561), S(481, 570), S(457, 578), S(449, 573),
        S(431, 572), S(484, 574), S(494, 569), S(506, 554), S(476, 557), S(478, 567), S(461, 570), S(445, 570),
        S(434, 559), S(432, 579), S(463, 572), S(477, 554), S(468, 554), S(447, 569), S(422, 574), S(421, 567),
        S(409, 540), S(417, 557), S(423, 560), S(441, 544), S(433, 550), S(419, 561), S(411, 560), S(408, 551),
        S(418, 518), S(439, 528), S(430, 538), S(437, 529), S(423, 534), S(414, 543), S(406, 546), S(404, 531),
        S(373, 532), S(429, 528), S(447, 526), S(444, 522), S(431, 526), S(429, 536), S(410, 537), S(405, 526),
        S(420, 516), S(417, 541), S(452, 530), S(456, 526), S(442, 533), S(438, 540), S(432, 531), S(437, 527),
    ], [
        S(1019, 997), S(1006, 1009), S(1019, 1020), S(1001, 1028), S(982, 1035), S(977, 1032), S(961, 1023), S(934, 1019),
        S(995, 982), S(923, 1059), S(989, 1047), S(945, 1081), S(940, 1074), S(935, 1066), S(911, 1059), S(921, 1016),
        S(985, 1006), S(1013, 1023), S(1023, 1035), S(1002, 1046), S(956, 1061), S(962, 1037), S(940, 1026), S(953, 975),
        S(980, 994), S(956, 1040), S(962, 1064), S(970, 1057), S(964, 1054), S(947, 1041), S(939, 1026), S(941, 988),
        S(958, 984), S(966, 1004), S(954, 1021), S(955, 1030), S(949, 1038), S(954, 1011), S(940, 1004), S(946, 964),
        S(962, 925), S(974, 952), S(972, 975), S(964, 979), S(956, 982), S(954, 987), S(959, 957), S(940, 956),
        S(944, 892), S(984, 898), S(982, 911), S(969, 945), S(966, 946), S(969, 940), S(958, 949), S(938, 951),
        S(906, 890), S(909, 900), S(939, 904), S(951, 929), S(966, 918), S(941, 952), S(936, 942), S(946, 938),
    ], [
        S( 88, -43), S( 72,   2), S( 64,  -4), S( 74, -15), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 50,   6), S( 60,  31), S( 86,  22), S( 55,  17), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(  1,  30), S( 50,  41), S( 52,  35), S( 65,  25), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-33,  19), S(-28,  42), S( -0,  38), S( -5,  39), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-74,   7), S(-69,  27), S(-63,  34), S(-75,  43), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(-65,   3), S(-42,   9), S(-70,  22), S(-76,  29), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S(  5, -18), S( 10, -11), S(-46,   6), S(-61,  10), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
        S( 14, -56), S( 28, -38), S(-26, -25), S( -5, -38), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0),
    ],
];

const ROOK_SEMI_OPEN_FILE: [S; 8] = [S( 57,  15), S( 68, -12), S( 30,  -9), S( 17,   2), S( 26,  -1), S( 19,  -5), S( 25,  -5), S( 24,   8)];

const ROOK_FULL_OPEN_FILE: [S; 8] = [S( 60, -33), S( 38, -11), S( 36,  -3), S( 25,   5), S( 18,  12), S( 21,  13), S( 24,   7), S( 25,  -1)];

const ISOLATED_PAWN_FILE: [S; 8] = [S(-48,  16), S(-16,  -7), S(-26,  -6), S(-32, -12), S(-32, -15), S(-24, -11), S(-17,  -6), S( -2,  -7)];
